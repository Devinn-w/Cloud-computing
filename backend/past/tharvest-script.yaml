
apiVersion: v1
kind: ConfigMap
metadata:
  name: tharvest-script
data:
  tharvest.py: |
    from mastodon import Mastodon, MastodonError
    from html import unescape
    from typing import List, Dict, Any
    import json
    import time
    import re
    import logging
    from elasticsearch8 import Elasticsearch
    from datetime import datetime, timezone
    from flask import request
    from vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer
    import math
    
    try:
        from flask import current_app
        logger = current_app.logger
    except RuntimeError:
        logging.basicConfig(level=logging.INFO)
        logger = logging.getLogger(__name__)
    
    KEYWORDS = ["donald trump", "trump", "maga", "make america great again","potus","trumpism","trumpian","45th president"]
    
    analyzer = SentimentIntensityAnalyzer()
    
    def analyze_sentiment(text: str) -> float:
        try:
            score = analyzer.polarity_scores(text)["compound"]
            if score is None or math.isnan(score) or math.isinf(score):
                return 2.0
            return round(score, 4)
        except Exception:
            return 2.0
    
    def remove_html_tags(text: str) -> str:
        clean = re.compile('<.*?>')
        return unescape(re.sub(clean, '', text))
    
    def extract_matched_keywords(text: str) -> List[str]:
        return [kw for kw in KEYWORDS if kw in text.lower()]
    
    def contains_keywords(text: str) -> bool:
        text = text.lower()
        return any(keyword in text for keyword in KEYWORDS)
    
    def main():
        matches = 0
        max_id = None
        page_limit = 5000
        STOP_DATE = datetime(2025, 4, 2, tzinfo=timezone.utc)
    
        # Initialize Elasticsearch client
        es_client: Elasticsearch = Elasticsearch(
            'https://elasticsearch-master.elastic.svc.cluster.local:9200',
            verify_certs=False,
            ssl_show_warn=False,
            basic_auth=('elastic', 'elastic')
        )
        
        # Initialize Mastodon client with type annotation
        mastodon: Mastodon = Mastodon(
            access_token='468XGrkU6y2GYVnmTXF_VlxeJGF2GwXw8uOKLMFz7zY',
            api_base_url='https://mastodon.au',
            request_timeout=10
        )
    
        try:
            for page in range(page_limit):
                posts = mastodon.timeline(timeline='public', limit=40, max_id=max_id, remote=True)
    
                if not posts:
                    logger.info("No more posts found.")
                    break
    
                for post in posts:
                    created_at = post['created_at']
                    if created_at < STOP_DATE:
                        logger.info(f"Post ID {post['id']} is older than {STOP_DATE}. Stopping.")
                        return {"status": "done", "indexed_posts": matches}
    
                    content = remove_html_tags(post.get('content', ''))
                    if contains_keywords(content):
                        matched = extract_matched_keywords(content)
                        matches += 1
    
                        doc = {
                            'id': post['id'],
                            'source': 'mastodon',
                            'user': post['account']['acct'],
                            'content': content,
                            'created_at': created_at.strftime("%Y-%m-%d %H:%M:%S"),
                            'sentiment_score': analyze_sentiment(content),
                            'matched_keywords': matched
                        }
    
                        doc_id = str(post["id"])
    
                        try:
                            es_client.index(
                            index='mastodon-posts',
                            id=doc_id,
                            document=doc,
                            op_type='create' 
                            )

                            logger.info(f"Indexed {doc_id} with {matched}")
                        except Exception as e:
                            if '409' in str(e):
                                logger.info(f"Skipped duplicate post: {doc_id}")
                            else:
                                logger.error(f"Failed to index doc {doc_id}: {e}")
    
                max_id = int(posts[-1]['id']) - 1
                time.sleep(1)
    
            logger.info(f"Finished run. Total matched posts: {matches}")
            return {"status": "done", "indexed_posts": matches}
    
        except MastodonError as e:
            logger.error(f"[Mastodon ERROR] {e}")
            return {"status": "error", "message": str(e)}
    
    if __name__ == "__main__":
        main()
